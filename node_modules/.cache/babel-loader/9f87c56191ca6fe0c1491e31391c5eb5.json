{"ast":null,"code":"var _jsxFileName = \"C:\\\\React-Projects-master\\\\google-keep-clone\\\\src\\\\components\\\\dark.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport * as React from 'react';\nimport IconButton from '@mui/material/IconButton';\nimport Box from '@mui/material/Box';\nimport { useTheme, ThemeProvider, createTheme } from '@mui/material/styles';\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ColorModeContext = /*#__PURE__*/React.createContext({\n  toggleColorMode: () => {}\n});\n\nfunction MyApp() {\n  _s();\n\n  const theme = useTheme();\n  const colorMode = React.useContext(ColorModeContext);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: '100%',\n      bgcolor: 'background.default',\n      color: 'text.primary',\n      borderRadius: 1,\n      p: 3\n    },\n    children: [theme.palette.mode, \" mode\", /*#__PURE__*/_jsxDEV(IconButton, {\n      sx: {\n        ml: 1\n      },\n      onClick: colorMode.toggleColorMode,\n      color: \"inherit\",\n      children: theme.palette.mode === 'dark' ? /*#__PURE__*/_jsxDEV(Brightness7Icon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 42\n      }, this) : /*#__PURE__*/_jsxDEV(Brightness4Icon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 64\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MyApp, \"80lvBfk7TN8cUIlLm9bQxIykp7M=\", false, function () {\n  return [useTheme];\n});\n\n_c = MyApp;\n\nconst ToggleColorMode = () => {\n  _s2();\n\n  const [mode, setMode] = React.useState('light');\n  const colorMode = React.useMemo(() => ({\n    toggleColorMode: () => {\n      setMode(prevMode => prevMode === 'light' ? 'dark' : 'light');\n    }\n  }), []);\n  const theme = React.useMemo(() => createTheme({\n    palette: {\n      mode\n    }\n  }), [mode]);\n  return /*#__PURE__*/_jsxDEV(ColorModeContext.Provider, {\n    value: colorMode,\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: /*#__PURE__*/_jsxDEV(MyApp, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(ToggleColorMode, \"d4Wg7a/ehJsJwQbDoYd9huIJFWY=\");\n\n_c2 = ToggleColorMode;\nexport default ToggleColorMode;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyApp\");\n$RefreshReg$(_c2, \"ToggleColorMode\");","map":{"version":3,"sources":["C:/React-Projects-master/google-keep-clone/src/components/dark.jsx"],"names":["React","IconButton","Box","useTheme","ThemeProvider","createTheme","Brightness4Icon","Brightness7Icon","ColorModeContext","createContext","toggleColorMode","MyApp","theme","colorMode","useContext","width","bgcolor","color","borderRadius","p","palette","mode","ml","ToggleColorMode","setMode","useState","useMemo","prevMode"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,SAASC,QAAT,EAAmBC,aAAnB,EAAkCC,WAAlC,QAAqD,sBAArD;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,OAAOC,eAAP,MAA4B,iCAA5B;;AAEA,MAAMC,gBAAgB,gBAAGR,KAAK,CAACS,aAAN,CAAoB;AAAEC,EAAAA,eAAe,EAAE,MAAM,CAAE;AAA3B,CAApB,CAAzB;;AAEA,SAASC,KAAT,GAAiB;AAAA;;AACf,QAAMC,KAAK,GAAGT,QAAQ,EAAtB;AACA,QAAMU,SAAS,GAAGb,KAAK,CAACc,UAAN,CAAiBN,gBAAjB,CAAlB;AACA,sBACE,QAAC,GAAD;AACE,IAAA,EAAE,EAAE;AACFO,MAAAA,KAAK,EAAE,MADL;AAEFC,MAAAA,OAAO,EAAE,oBAFP;AAGFC,MAAAA,KAAK,EAAE,cAHL;AAIFC,MAAAA,YAAY,EAAE,CAJZ;AAKFC,MAAAA,CAAC,EAAE;AALD,KADN;AAAA,eASGP,KAAK,CAACQ,OAAN,CAAcC,IATjB,wBAUE,QAAC,UAAD;AAAY,MAAA,EAAE,EAAE;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAAhB;AAA2B,MAAA,OAAO,EAAET,SAAS,CAACH,eAA9C;AAA+D,MAAA,KAAK,EAAC,SAArE;AAAA,gBACGE,KAAK,CAACQ,OAAN,CAAcC,IAAd,KAAuB,MAAvB,gBAAgC,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,cAAhC,gBAAsD,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AADzD;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAnBQV,K;UACOR,Q;;;KADPQ,K;;AAqBT,MAAMY,eAAe,GAAG,MAAM;AAAA;;AAC5B,QAAM,CAACF,IAAD,EAAOG,OAAP,IAAkBxB,KAAK,CAACyB,QAAN,CAAe,OAAf,CAAxB;AACA,QAAMZ,SAAS,GAAGb,KAAK,CAAC0B,OAAN,CAChB,OAAO;AACLhB,IAAAA,eAAe,EAAE,MAAM;AACrBc,MAAAA,OAAO,CAAEG,QAAD,IAAeA,QAAQ,KAAK,OAAb,GAAuB,MAAvB,GAAgC,OAAhD,CAAP;AACD;AAHI,GAAP,CADgB,EAMhB,EANgB,CAAlB;AASA,QAAMf,KAAK,GAAGZ,KAAK,CAAC0B,OAAN,CACZ,MACErB,WAAW,CAAC;AACVe,IAAAA,OAAO,EAAE;AACPC,MAAAA;AADO;AADC,GAAD,CAFD,EAOZ,CAACA,IAAD,CAPY,CAAd;AAUA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAER,SAAlC;AAAA,2BACE,QAAC,aAAD;AAAe,MAAA,KAAK,EAAED,KAAtB;AAAA,6BACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA5BD;;IAAMW,e;;MAAAA,e;AA6BN,eAAeA,eAAf","sourcesContent":["import * as React from 'react';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Box from '@mui/material/Box';\r\nimport { useTheme, ThemeProvider, createTheme } from '@mui/material/styles';\r\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\r\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\r\n\r\nconst ColorModeContext = React.createContext({ toggleColorMode: () => {} });\r\n\r\nfunction MyApp() {\r\n  const theme = useTheme();\r\n  const colorMode = React.useContext(ColorModeContext);\r\n  return (\r\n    <Box\r\n      sx={{\r\n        width: '100%',\r\n        bgcolor: 'background.default',\r\n        color: 'text.primary',\r\n        borderRadius: 1,\r\n        p: 3,\r\n      }}\r\n    >\r\n      {theme.palette.mode} mode\r\n      <IconButton sx={{ ml: 1 }} onClick={colorMode.toggleColorMode} color=\"inherit\">\r\n        {theme.palette.mode === 'dark' ? <Brightness7Icon /> : <Brightness4Icon />}\r\n      </IconButton>\r\n    </Box>\r\n  );\r\n}\r\n\r\nconst ToggleColorMode = () => {\r\n  const [mode, setMode] = React.useState('light');\r\n  const colorMode = React.useMemo(\r\n    () => ({\r\n      toggleColorMode: () => {\r\n        setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\r\n      },\r\n    }),\r\n    [],\r\n  );\r\n\r\n  const theme = React.useMemo(\r\n    () =>\r\n      createTheme({\r\n        palette: {\r\n          mode,\r\n        },\r\n      }),\r\n    [mode],\r\n  );\r\n\r\n  return (\r\n    <ColorModeContext.Provider value={colorMode}>\r\n      <ThemeProvider theme={theme}>\r\n        <MyApp />\r\n      </ThemeProvider>\r\n    </ColorModeContext.Provider>\r\n  );\r\n}\r\nexport default ToggleColorMode;"]},"metadata":{},"sourceType":"module"}