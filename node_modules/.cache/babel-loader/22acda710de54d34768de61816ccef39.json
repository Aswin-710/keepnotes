{"ast":null,"code":"var _jsxFileName = \"C:\\\\React-Projects-master\\\\google-keep-clone\\\\src\\\\components\\\\notes\\\\Notes.jsx\",\n    _s = $RefreshSig$();\n\nimport { useContext } from 'react';\nimport { Box, Grid } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport { DataContext } from '../../context/DataProvider';\nimport { reorder } from '../../utils/common-utils'; //components\n\nimport Form from './Form';\nimport Note from './Note';\nimport EmptyNotes from './EmptyNotes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DrawerHeader = styled('div')(_ref => {\n  let {\n    theme\n  } = _ref;\n  return { ...theme.mixins.toolbar\n  };\n});\n_c = DrawerHeader;\n\nconst Notes = () => {\n  _s();\n\n  const {\n    notes,\n    setNotes\n  } = useContext(DataContext);\n\n  const onDragEnd = result => {\n    if (!result.destination) return;\n    const items = reorder(notes, result.source.index, result.destination.index);\n    setNotes(items);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3,\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(DrawerHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), notes.length > 0 ? /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: onDragEnd,\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"droppable\",\n          children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            style: {\n              marginTop: 16\n            },\n            ...provided.droppableProps,\n            ref: provided.innerRef,\n            children: notes.map((note, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: note.id,\n              index: index,\n              children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(Grid, {\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Note, {\n                  note: note\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 53,\n                  columnNumber: 53\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 49\n              }, this)\n            }, note.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(EmptyNotes, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Notes, \"tYuVB1obexiVNt5hoWNEEZpjF+Q=\");\n\n_c2 = Notes;\nexport default Notes;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DrawerHeader\");\n$RefreshReg$(_c2, \"Notes\");","map":{"version":3,"sources":["C:/React-Projects-master/google-keep-clone/src/components/notes/Notes.jsx"],"names":["useContext","Box","Grid","styled","DragDropContext","Draggable","Droppable","DataContext","reorder","Form","Note","EmptyNotes","DrawerHeader","theme","mixins","toolbar","Notes","notes","setNotes","onDragEnd","result","destination","items","source","index","display","width","p","length","provided","snapshot","marginTop","droppableProps","innerRef","map","note","id","draggableProps","dragHandleProps"],"mappings":"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","sourcesContent":["import { useContext } from 'react';\n\nimport { Box, Grid } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { DragDropContext, Draggable, Droppable  } from 'react-beautiful-dnd';\n\nimport { DataContext } from '../../context/DataProvider';\nimport { reorder } from '../../utils/common-utils';\n\n//components\nimport Form from './Form';\nimport Note from './Note';\nimport EmptyNotes from './EmptyNotes';\n\nconst DrawerHeader = styled('div')(({ theme }) => ({\n    ...theme.mixins.toolbar,\n}));\n\nconst Notes = () => {\n\n    const { notes, setNotes } = useContext(DataContext);\n\n    const onDragEnd = (result) => {\n        if (!result.destination) \n          return;\n    \n        const items = reorder(notes, result.source.index, result.destination.index);    \n        setNotes(items);\n    }\n    \n    return (\n        <Box sx={{ display: 'flex', width: '100%' }}>\n            <Box sx={{ p: 3, width: '100%' }}>\n                <DrawerHeader />\n                <Form />\n                { notes.length > 0 ? \n                    <DragDropContext onDragEnd={onDragEnd}>\n                        <Droppable droppableId=\"droppable\">\n                            {(provided, snapshot) => (\n                                <Grid container style={{ marginTop: 16}}\n                                    {...provided.droppableProps}\n                                    ref={provided.innerRef}\n                                >\n                                {\n                                    notes.map((note, index) => (\n                                        <Draggable key={note.id} draggableId={note.id} index={index}>\n                                            {(provided, snapshot) => (\n                                                <Grid ref={provided.innerRef}\n                                                    {...provided.draggableProps}\n                                                    {...provided.dragHandleProps}\n                                                    item\n                                                >\n                                                    <Note note={note} />\n                                                </Grid>\n                                            )}\n                                        </Draggable >\n                                    ))\n                                }\n                                </Grid>\n                            )}\n                        </Droppable >\n                    </DragDropContext>\n                : <EmptyNotes /> }\n            </Box>\n        </Box>\n    )\n}\n\nexport default Notes;"]},"metadata":{},"sourceType":"module"}